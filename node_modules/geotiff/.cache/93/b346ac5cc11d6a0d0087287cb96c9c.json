{"id":"dHPO","dependencies":[{"name":"/home/travis/build/geotiffjs/geotiff.js/.babelrc","includedInParent":true,"mtime":1586203732481},{"name":"/home/travis/build/geotiffjs/geotiff.js/package.json","includedInParent":true,"mtime":1586203732493},{"name":"./decoder.worker.js","dynamic":true,"resolved":"/home/travis/build/geotiffjs/geotiff.js/src/decoder.worker.js","isolated":true,"loc":{"line":21,"column":30},"parent":"/home/travis/build/geotiffjs/geotiff.js/src/pool.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0,require(\"threads/register\");var e=require(\"threads\");const r=\"undefined\"!=typeof navigator?navigator.hardwareConcurrency:null;class t{constructor(t=r){const o=new Worker(\"/2c7c7d96717c4961451da3d86f1e1423.js\");this.pool=(0,e.Pool)(()=>(0,e.spawn)(o),t)}async decode(e,r){return new Promise((t,o)=>{this.pool.queue(async s=>{try{const n=await s(e,r);t(n)}catch(a){o(a)}})})}destroy(){this.pool.terminate(!0)}}var o=t;exports.default=o;"},"sourceMaps":{"js":{"mappings":[{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":0}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":13}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":20}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":35}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":43}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":56}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":57}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":64}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":68}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":76}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":89}},{"source":"pool.js","original":{"line":1,"column":0},"generated":{"line":1,"column":91}},{"source":"pool.js","original":{"line":1,"column":0},"generated":{"line":1,"column":99}},{"source":"pool.js","original":{"line":2,"column":0},"generated":{"line":1,"column":119}},{"source":"pool.js","original":{"line":2,"column":0},"generated":{"line":1,"column":123}},{"source":"pool.js","original":{"line":2,"column":0},"generated":{"line":1,"column":125}},{"source":"pool.js","original":{"line":2,"column":0},"generated":{"line":1,"column":133}},{"source":"pool.js","original":{"line":4,"column":0},"generated":{"line":1,"column":144}},{"source":"pool.js","name":"defaultPoolSize","original":{"line":4,"column":6},"generated":{"line":1,"column":150}},{"source":"pool.js","original":{"line":4,"column":45},"generated":{"line":1,"column":152}},{"source":"pool.js","name":"navigator","original":{"line":4,"column":31},"generated":{"line":1,"column":172}},{"source":"pool.js","name":"navigator","original":{"line":4,"column":59},"generated":{"line":1,"column":182}},{"source":"pool.js","name":"hardwareConcurrency","original":{"line":4,"column":69},"generated":{"line":1,"column":192}},{"source":"pool.js","original":{"line":4,"column":91},"generated":{"line":1,"column":212}},{"source":"pool.js","original":{"line":13,"column":0},"generated":{"line":1,"column":217}},{"source":"pool.js","name":"Pool","original":{"line":13,"column":6},"generated":{"line":1,"column":223}},{"source":"pool.js","name":"constructor","original":{"line":20,"column":2},"generated":{"line":1,"column":225}},{"source":"pool.js","name":"size","original":{"line":20,"column":14},"generated":{"line":1,"column":237}},{"source":"pool.js","name":"defaultPoolSize","original":{"line":20,"column":21},"generated":{"line":1,"column":239}},{"source":"pool.js","name":"worker","original":{"line":21,"column":10},"generated":{"line":1,"column":242}},{"source":"pool.js","name":"worker","original":{"line":21,"column":10},"generated":{"line":1,"column":248}},{"source":"pool.js","original":{"line":21,"column":19},"generated":{"line":1,"column":250}},{"source":"pool.js","name":"Worker","original":{"line":21,"column":23},"generated":{"line":1,"column":254}},{"source":"pool.js","original":{"line":21,"column":30},"generated":{"line":1,"column":261}},{"source":"pool.js","name":"pool","original":{"line":22,"column":9},"generated":{"line":1,"column":301}},{"source":"pool.js","name":"pool","original":{"line":22,"column":9},"generated":{"line":1,"column":306}},{"source":"pool.js","original":{"line":22,"column":16},"generated":{"line":1,"column":312}},{"source":"pool.js","original":{"line":22,"column":22},"generated":{"line":1,"column":314}},{"source":"pool.js","original":{"line":22,"column":22},"generated":{"line":1,"column":316}},{"source":"pool.js","original":{"line":22,"column":22},"generated":{"line":1,"column":322}},{"source":"pool.js","original":{"line":22,"column":28},"generated":{"line":1,"column":327}},{"source":"pool.js","name":"worker","original":{"line":22,"column":34},"generated":{"line":1,"column":329}},{"source":"pool.js","name":"worker","original":{"line":22,"column":34},"generated":{"line":1,"column":331}},{"source":"pool.js","name":"worker","original":{"line":22,"column":34},"generated":{"line":1,"column":338}},{"source":"pool.js","name":"size","original":{"line":22,"column":43},"generated":{"line":1,"column":341}},{"source":"pool.js","name":"decode","original":{"line":30,"column":8},"generated":{"line":1,"column":344}},{"source":"pool.js","name":"fileDirectory","original":{"line":30,"column":15},"generated":{"line":1,"column":357}},{"source":"pool.js","name":"buffer","original":{"line":30,"column":30},"generated":{"line":1,"column":359}},{"source":"pool.js","original":{"line":31,"column":11},"generated":{"line":1,"column":362}},{"source":"pool.js","original":{"line":31,"column":11},"generated":{"line":1,"column":369}},{"source":"pool.js","name":"Promise","original":{"line":31,"column":15},"generated":{"line":1,"column":373}},{"source":"pool.js","original":{"line":31,"column":23},"generated":{"line":1,"column":381}},{"source":"pool.js","name":"resolve","original":{"line":31,"column":24},"generated":{"line":1,"column":382}},{"source":"pool.js","name":"reject","original":{"line":31,"column":33},"generated":{"line":1,"column":384}},{"source":"pool.js","name":"pool","original":{"line":32,"column":11},"generated":{"line":1,"column":389}},{"source":"pool.js","name":"pool","original":{"line":32,"column":11},"generated":{"line":1,"column":394}},{"source":"pool.js","name":"queue","original":{"line":32,"column":16},"generated":{"line":1,"column":399}},{"source":"pool.js","original":{"line":32,"column":22},"generated":{"line":1,"column":405}},{"source":"pool.js","original":{"line":32,"column":22},"generated":{"line":1,"column":411}},{"source":"pool.js","original":{"line":33,"column":12},"generated":{"line":1,"column":415}},{"source":"pool.js","name":"data","original":{"line":34,"column":16},"generated":{"line":1,"column":419}},{"source":"pool.js","name":"data","original":{"line":34,"column":16},"generated":{"line":1,"column":425}},{"source":"pool.js","name":"decode","original":{"line":34,"column":29},"generated":{"line":1,"column":433}},{"source":"pool.js","name":"fileDirectory","original":{"line":34,"column":36},"generated":{"line":1,"column":435}},{"source":"pool.js","name":"buffer","original":{"line":34,"column":51},"generated":{"line":1,"column":437}},{"source":"pool.js","name":"resolve","original":{"line":35,"column":10},"generated":{"line":1,"column":440}},{"source":"pool.js","name":"data","original":{"line":35,"column":18},"generated":{"line":1,"column":442}},{"source":"pool.js","original":{"line":36,"column":10},"generated":{"line":1,"column":445}},{"source":"pool.js","name":"err","original":{"line":36,"column":17},"generated":{"line":1,"column":451}},{"source":"pool.js","name":"reject","original":{"line":37,"column":10},"generated":{"line":1,"column":454}},{"source":"pool.js","name":"err","original":{"line":37,"column":17},"generated":{"line":1,"column":456}},{"source":"pool.js","name":"destroy","original":{"line":43,"column":2},"generated":{"line":1,"column":464}},{"source":"pool.js","name":"pool","original":{"line":44,"column":9},"generated":{"line":1,"column":474}},{"source":"pool.js","name":"pool","original":{"line":44,"column":9},"generated":{"line":1,"column":479}},{"source":"pool.js","name":"terminate","original":{"line":44,"column":14},"generated":{"line":1,"column":484}},{"source":"pool.js","original":{"line":44,"column":24},"generated":{"line":1,"column":495}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":499}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":503}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":505}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":507}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":515}},{"source":"pool.js","name":"Pool","original":{"line":48,"column":15},"generated":{"line":1,"column":523}}],"sources":{"pool.js":"import 'threads/register';\nimport { Pool as tPool, spawn } from 'threads';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   */\n  constructor(size = defaultPoolSize) {\n    const worker = new Worker('./decoder.worker.js');\n    this.pool = tPool(() => spawn(worker), size);\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    return new Promise((resolve, reject) => {\n      this.pool.queue(async (decode) => {\n        try {\n          const data = await decode(fileDirectory, buffer);\n          resolve(data);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  destroy() {\n    this.pool.terminate(true);\n  }\n}\n\nexport default Pool;\n"},"lineCount":null}},"error":null,"hash":"20cc406067a970947c3212a94277cf34","cacheData":{"env":{}}}