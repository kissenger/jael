{"id":"PRGP","dependencies":[{"name":"/home/travis/build/geotiffjs/geotiff.js/package.json","includedInParent":true,"mtime":1586203732493},{"name":"/home/travis/build/geotiffjs/geotiff.js/node_modules/threads/package.json","includedInParent":true,"mtime":1586165210060}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.createPromiseWithResolver=t;const e=()=>void 0;function t(){let t,r=!1,o=e;return[new Promise(e=>{r?e(t):o=e}),e=>{r=!0,t=e,o()}]}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":0}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":13}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":20}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":35}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":43}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":56}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":57}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":64}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":68}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":76}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":24,"column":1},"generated":{"line":1,"column":102}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":1,"column":0},"generated":{"line":1,"column":104}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"doNothing","original":{"line":1,"column":6},"generated":{"line":1,"column":110}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":1,"column":18},"generated":{"line":1,"column":112}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"undefined","original":{"line":1,"column":24},"generated":{"line":1,"column":121}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":6,"column":7},"generated":{"line":1,"column":123}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"createPromiseWithResolver","original":{"line":6,"column":16},"generated":{"line":1,"column":132}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"alreadyResolved","original":{"line":7,"column":8},"generated":{"line":1,"column":136}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolvedTo","original":{"line":8,"column":8},"generated":{"line":1,"column":140}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"alreadyResolved","original":{"line":7,"column":8},"generated":{"line":1,"column":142}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":7,"column":26},"generated":{"line":1,"column":145}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolver","original":{"line":9,"column":8},"generated":{"line":1,"column":147}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"doNothing","original":{"line":9,"column":19},"generated":{"line":1,"column":149}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":23,"column":11},"generated":{"line":1,"column":151}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":23,"column":11},"generated":{"line":1,"column":157}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":10,"column":20},"generated":{"line":1,"column":158}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"Promise","original":{"line":10,"column":24},"generated":{"line":1,"column":162}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolve","original":{"line":10,"column":32},"generated":{"line":1,"column":170}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"alreadyResolved","original":{"line":11,"column":12},"generated":{"line":1,"column":174}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolve","original":{"line":12,"column":12},"generated":{"line":1,"column":176}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolvedTo","original":{"line":12,"column":20},"generated":{"line":1,"column":178}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolver","original":{"line":15,"column":12},"generated":{"line":1,"column":181}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolve","original":{"line":15,"column":23},"generated":{"line":1,"column":183}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"value","original":{"line":18,"column":29},"generated":{"line":1,"column":187}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"alreadyResolved","original":{"line":19,"column":8},"generated":{"line":1,"column":191}},{"source":"../node_modules/threads/dist-esm/promise.js","original":{"line":19,"column":26},"generated":{"line":1,"column":194}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolvedTo","original":{"line":20,"column":8},"generated":{"line":1,"column":196}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"value","original":{"line":20,"column":21},"generated":{"line":1,"column":198}},{"source":"../node_modules/threads/dist-esm/promise.js","name":"resolver","original":{"line":21,"column":8},"generated":{"line":1,"column":200}}],"sources":{"../node_modules/threads/dist-esm/promise.js":"const doNothing = () => undefined;\n/**\n * Creates a new promise and exposes its resolver function.\n * Use with care!\n */\nexport function createPromiseWithResolver() {\n    let alreadyResolved = false;\n    let resolvedTo;\n    let resolver = doNothing;\n    const promise = new Promise(resolve => {\n        if (alreadyResolved) {\n            resolve(resolvedTo);\n        }\n        else {\n            resolver = resolve;\n        }\n    });\n    const exposedResolver = (value) => {\n        alreadyResolved = true;\n        resolvedTo = value;\n        resolver();\n    };\n    return [promise, exposedResolver];\n}\n"},"lineCount":null}},"error":null,"hash":"e17b77c4a93cdfa389494577c32ada78","cacheData":{"env":{}}}